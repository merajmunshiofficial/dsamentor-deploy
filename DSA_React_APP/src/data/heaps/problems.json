[
  {
    "name": "Convert Min-Heap to Max-Heap",
    "endpoint": "/api/heaps/heap-converter",
    "methodName": "minToMaxHeap",
    "serviceFile": "HeapsService.java",
    "defaultInput": { "array": [1, 3, 5, 7, 9, 2, 4, 6, 8, 0] },
    "description": "Convert a given min-heap array to a max-heap array.",
    "approach": "Heapify down from the last non-leaf node to the root to build a max-heap.",
    "code": "public int[] minToMaxHeap(int[] nums) {\n    int n = nums.length;\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapifyDownMax(nums, i);\n    }\n    return nums;\n}"
  },
  {
    "name": "Heap Sort",
    "endpoint": "/api/heaps/heap-sorter",
    "methodName": "heapSort",
    "serviceFile": "HeapsService.java",
    "defaultInput": { "array": [4, 10, 3, 5, 1] },
    "description": "Sort an array using heap sort algorithm.",
    "approach": "Build a max-heap and repeatedly extract the maximum element to sort the array.",
    "code": "public int[] heapSort(int[] nums) {\n    buildMaxHeap(nums);\n    int last = nums.length - 1;\n    while (last > 0) {\n        int temp = nums[0]; nums[0] = nums[last]; nums[last] = temp;\n        last--;\n        heapifyDownMax(nums, 0, last);\n    }\n    return nums;\n}"
  },
  {
    "name": "Kth Largest Element in Array",
    "endpoint": "/api/heaps/kth-largest-element",
    "methodName": "kthLargestElement",
    "serviceFile": "HeapsService.java",
    "defaultInput": { "array": [3,2,1,5,6,4], "k": 2 },
    "description": "Find the kth largest element in an array.",
    "approach": "Use a min-heap of size k to keep track of the k largest elements.",
    "code": "public int kthLargestElement(int[] nums, int k) {\n    PriorityQueue<Integer> pq = new PriorityQueue<>();\n    for (int i = 0; i < k; i++) pq.add(nums[i]);\n    for (int i = k; i < nums.length; i++) {\n        if (nums[i] > pq.peek()) {\n            pq.poll(); pq.add(nums[i]);\n        }\n    }\n    return pq.peek();\n}"
  },
  {
    "name": "Validate Min-Heap",
    "endpoint": "/api/heaps/min-heap-validator",
    "methodName": "isMinHeap",
    "serviceFile": "HeapsService.java",
    "defaultInput": { "array": [1, 3, 5, 7, 9, 2, 4, 6, 8, 0] },
    "description": "Check if the given array represents a valid min-heap.",
    "approach": "Check for every parent node that it is less than or equal to its children.",
    "code": "public boolean isMinHeap(int[] nums) {\n    int n = nums.length;\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        int left = 2 * i + 1, right = 2 * i + 2;\n        if (left < n && nums[left] < nums[i]) return false;\n        if (right < n && nums[right] < nums[i]) return false;\n    }\n    return true;\n}"
  },
  {
    "name": "Build Min-Heap from Array",
    "endpoint": "/api/heaps/build-min-heap",
    "methodName": "buildMinHeap",
    "serviceFile": "HeapsService.java",
    "defaultInput": { "array": [9, 4, 7, 1, -2, 6, 5] },
    "description": "Build a min-heap from an unsorted array.",
    "approach": "Heapify down from the last non-leaf node to the root to build a min-heap.",
    "code": "public int[] buildMinHeap(int[] nums) {\n    int n = nums.length;\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapifyDownMin(nums, i);\n    }\n    return nums;\n}"
  },
  {
    "name": "Adjust Min-Heap Value at Index",
    "endpoint": "/api/heaps/adjust-min-heap",
    "methodName": "adjustMinHeap",
    "serviceFile": "HeapsService.java",
    "defaultInput": { "array": [1, 3, 5, 7, 9, 2, 4, 6, 8, 0], "index": 3, "val": 0 },
    "description": "Change the value at a given index in a min-heap and restore the heap property.",
    "approach": "If the new value is less, heapify up; if greater, heapify down.",
    "code": "public int[] adjustMinHeap(int[] nums, int ind, int val) {\n    if (nums[ind] > val) {\n        nums[ind] = val;\n        heapifyUpMin(nums, ind);\n    } else {\n        nums[ind] = val;\n        heapifyDownMin(nums, ind);\n    }\n    return nums;\n}"
  }
]