{
  "arrays": [
    {
      "name": "Find Max Consecutive Ones",
      "endpoint": "/api/arrays/findMaxConsecutiveOnes",
      "methodName": "findMaxConsecutiveOnes",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [1, 1, 0, 1, 1, 1] },
      "description": "Find the maximum number of consecutive 1s in a binary array.",
      "approach": "Iterate and count consecutive 1s, track the maximum.",
      "code": "public int findMaxConsecutiveOnes(int[] nums) {\n    int cnt = 0;\n    int maxi = 0;\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] == 1) {\n            cnt++;\n            maxi = Math.max(maxi, cnt);\n        } else {\n            cnt = 0;\n        }\n    }\n    return maxi;\n}"
    },
    {
      "name": "Single Number",
      "endpoint": "/api/arrays/singleNumber",
      "methodName": "singleNumber",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [4, 1, 2, 1, 2] },
      "description": "Find the element that appears only once in an array where every other element appears twice.",
      "approach": "Use XOR to find the unique element.",
      "code": "public int singleNumber(int[] nums) {\n    int xorr = 0;\n    for (int num : nums) {\n        xorr ^= num;\n    }\n    return xorr;\n}"
    },
    {
      "name": "Largest Element",
      "endpoint": "/api/arrays/largestElement",
      "methodName": "largestElement",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [2, 3, 1, 4, 5] },
      "description": "Find the largest element in the array.",
      "approach": "Iterate and track the maximum value.",
      "code": "public int largestElement(int[] nums) {\n    int max = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max;\n}"
    },
    {
      "name": "Second Largest Element",
      "endpoint": "/api/arrays/secondLargestElement",
      "methodName": "secondLargestElement",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [2, 3, 1, 4, 5] },
      "description": "Find the second largest element in the array.",
      "approach": "Track the largest and second largest values while iterating.",
      "code": "public int secondLargestElement(int[] nums) {\n    if (nums.length < 2) {\n        return -1;\n    }\n    int largest = Integer.MIN_VALUE;\n    int secondLargest = Integer.MIN_VALUE;\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] > largest) {\n            secondLargest = largest;\n            largest = nums[i];\n        } else if (nums[i] > secondLargest && nums[i] != largest) {\n            secondLargest = nums[i];\n        }\n    }\n    return secondLargest == Integer.MIN_VALUE ? -1 : secondLargest;\n}"
    },
    {
      "name": "Four Sum",
      "endpoint": "/api/arrays/fourSum",
      "methodName": "fourSum",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [1, 0, -1, 0, -2, 2], "target": 0 },
      "description": "Find all unique quadruplets in the array which gives the sum of target.",
      "approach": "Sort and use two pointers for each pair.",
      "code": "public List<List<Integer>> fourSum(int[] nums, int target) {\n    List<List<Integer>> ans = new ArrayList<>();\n    int n = nums.length;\n    Arrays.sort(nums);\n    for (int i = 0; i < n; i++) {\n        if (i > 0 && nums[i] == nums[i - 1]) continue;\n        for (int j = i + 1; j < n; j++) {\n            if (j > i + 1 && nums[j] == nums[j - 1]) continue;\n            int k = j + 1, l = n - 1;\n            while (k < l) {\n                long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];\n                if (sum == target) {\n                    ans.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));\n                    k++; l--;\n                    while (k < l && nums[k] == nums[k - 1]) k++;\n                    while (k < l && nums[l] == nums[l + 1]) l--;\n                } else if (sum < target) {\n                    k++;\n                } else {\n                    l--;\n                }\n            }\n        }\n    }\n    return ans;\n}"
    },
    {
      "name": "Find Missing and Repeating Numbers",
      "endpoint": "/api/arrays/findMissingRepeatingNumbers",
      "methodName": "findMissingRepeatingNumbers",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [4, 3, 6, 2, 1, 1] },
      "description": "Find the missing and repeating numbers in an array of size n containing numbers from 1 to n.",
      "approach": "Use XOR and bit manipulation to find the two numbers.",
      "code": "public int[] findMissingRepeatingNumbers(int[] nums) {\n    int n = nums.length;\n    int xr = 0;\n    for (int i = 0; i < n; i++) {\n        xr = xr ^ nums[i];\n        xr = xr ^ (i + 1);\n    }\n    int number = (xr & ~(xr - 1));\n    int zero = 0;\n    int one = 0;\n    for (int i = 0; i < n; i++) {\n        if ((nums[i] & number) != 0) {\n            one = one ^ nums[i];\n        } else {\n            zero = zero ^ nums[i];\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if ((i & number) != 0) {\n            one = one ^ i;\n        } else {\n            zero = zero ^ i;\n        }\n    }\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (nums[i] == zero) {\n            cnt++;\n        }\n    }\n    if (cnt == 2) {\n        return new int[] {zero, one};\n    }\n    return new int[] {one, zero};\n}"
    },
    {
      "name": "Move Zeroes",
      "endpoint": "/api/arrays/moveZeroes",
      "methodName": "moveZeroes",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [0, 1, 0, 3, 12] },
      "description": "Move all zeroes to the end of the array while maintaining the relative order of the non-zero elements.",
      "approach": "Use two pointers to swap zero and non-zero elements.",
      "code": "public int[] moveZeroes(int[] nums) {\n    int j = -1;\n    int n = nums.length;\n    for (int i = 0; i < n; i++) {\n        if (nums[i] == 0) {\n            j = i;\n            break;\n        }\n    }\n    if (j == -1) return nums;\n    for (int i = j + 1; i < n; i++) {\n        if (nums[i] != 0) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            j++;\n        }\n    }\n    return nums;\n}"
    },
    {
      "name": "Remove Duplicates",
      "endpoint": "/api/arrays/removeDuplicates",
      "methodName": "removeDuplicates",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [1, 1, 2] },
      "description": "Remove duplicates from a sorted array in-place and return the new length.",
      "approach": "Use two pointers to overwrite duplicates.",
      "code": "public int removeDuplicates(int[] nums) {\n    if (nums.length == 0) {\n        return 0;\n    }\n    int i = 0;\n    for (int j = 1; j < nums.length; j++) {\n        if (nums[i] != nums[j]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}"
    },
    {
      "name": "Rotate Array",
      "endpoint": "/api/arrays/rotateArray",
      "methodName": "rotateArray",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [1, 2, 3, 4, 5, 6, 7], "k": 3 },
      "description": "Rotate the array to the right by k steps.",
      "approach": "Reverse parts of the array and then the whole array.",
      "code": "public int[] rotateArray(int[] nums, int k) {\n    int n = nums.length;\n    k = k % n;\n    reverseArray(nums, 0, k - 1);\n    reverseArray(nums, k, n - 1);\n    reverseArray(nums, 0, n - 1);\n    return nums;\n}"
    },
    {
      "name": "Linear Search",
      "endpoint": "/api/arrays/linearSearch",
      "methodName": "linearSearch",
      "serviceFile": "ArrayService.java",
      "defaultInput": { "nums": [2, 4, 6, 8, 10], "target": 8 },
      "description": "Find the index of the target value in the array using linear search.",
      "approach": "Iterate through the array and return the index if found.",
      "code": "public int linearSearch(int[] nums, int target) {\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] == target) {\n            return i;\n        }\n    }\n    return -1;\n}"
    }
  ],
  "dynamicprogramming": [
    {
      "name": "Climb Stairs",
      "endpoint": "/api/dynamicprogramming/climbStairs",
      "description": "Count total ways to reach nth stair.",
      "code": "public int climbStairs(int n) { ... }",
      "defaultInput": { "n": 5 },
      "topic": "dynamicprogramming"
    },
    {
      "name": "0/1 Knapsack",
      "endpoint": "/api/dynamicprogramming/knapsack01",
      "description": "Solve 0/1 Knapsack problem.",
      "code": "public int knapsack01(int[] wt, int[] val, int n, int W) { ... }",
      "defaultInput": { "wt": [1, 2, 4, 5], "val": [5, 4, 8, 6], "n": 4, "W": 5 },
      "topic": "dynamicprogramming"
    },
    {
      "name": "House Robber",
      "endpoint": "/api/dynamicprogramming/houseRobber",
      "description": "House robber problem - maximum money without adjacent houses.",
      "code": "public int houseRobber(int[] nums) { ... }",
      "defaultInput": { "nums": [2, 7, 9, 3, 1] },
      "topic": "dynamicprogramming"
    }
  ],
  "graph": [
    {
      "name": "DFS of Graph",
      "endpoint": "/api/graph/dfsOfGraph",
      "description": "Return a list of nodes visited in DFS order.",
      "code": "public List<Integer> dfsOfGraph(int V, List<Integer>[] adj) { ... }",
      "defaultInput": { "V": 5, "adj": [[1,2],[0,3],[0,4],[],[]] },
      "topic": "graph"
    },
    {
      "name": "BFS of Graph",
      "endpoint": "/api/graph/bfsOfGraph",
      "description": "Return a list of nodes visited in BFS order.",
      "code": "public List<Integer> bfsOfGraph(int V, List<Integer>[] adj) { ... }",
      "defaultInput": { "V": 5, "adj": [[1,2],[0,3],[0,4],[],[]] },
      "topic": "graph"
    }
  ],
  "greedyalgorithm": [
    {
      "name": "Max Meetings",
      "endpoint": "/api/greedyalgorithm/maxMeetings",
      "description": "Find maximum number of meetings that can be held.",
      "code": "public int maxMeetings(int[] start, int[] end) { ... }",
      "defaultInput": { "start": [1, 3, 0, 5, 8, 5], "end": [2, 4, 6, 7, 9, 9] },
      "topic": "greedyalgorithm"
    },
    {
      "name": "Lemonade Change",
      "endpoint": "/api/greedyalgorithm/lemonadeChange",
      "description": "Check if lemonade change is possible.",
      "code": "public boolean lemonadeChange(int[] bills) { ... }",
      "defaultInput": { "bills": [5, 5, 5, 10, 20] },
      "topic": "greedyalgorithm"
    }
  ],
  "bitmanipulation": [
    {
      "name": "Divide Two Integers",
      "endpoint": "/api/bitmanipulation/divide",
      "description": "Divide two integers without using multiplication or division.",
      "code": "public int divide(int dividend, int divisor) { ... }",
      "defaultInput": { "dividend": 10, "divisor": 3 },
      "topic": "bitmanipulation"
    },
    {
      "name": "Single Number (Bit)",
      "endpoint": "/api/bitmanipulation/singleNumber",
      "description": "Find the single number that appears once in an array where all others appear twice.",
      "code": "public int singleNumber(int[] nums) { ... }",
      "defaultInput": { "nums": [2, 2, 1] },
      "topic": "bitmanipulation"
    }
  ],
  "binarysearch": [
    {
      "name": "Aggressive Cows",
      "endpoint": "/api/binarysearch/aggressiveCows",
      "description": "Place cows in stalls such that minimum distance between any two cows is maximized.",
      "code": "public int aggressiveCows(int[] nums, int k) { ... }",
      "defaultInput": { "nums": [1, 2, 4, 8, 9], "k": 3 },
      "topic": "binarysearch"
    },
    {
      "name": "Find Floor and Ceil",
      "endpoint": "/api/binarysearch/findFloorAndCeil",
      "description": "Find floor and ceil of a number in a sorted array.",
      "code": "public int[] findFloorAndCeil(int[] nums, int x) { ... }",
      "defaultInput": { "nums": [1, 2, 8, 10, 10, 12, 19], "x": 5 },
      "topic": "binarysearch"
    }
  ],
  "linkedlist": [
    {
      "name": "Add One to Number",
      "endpoint": "/api/linkedlist/addOne",
      "description": "Add one to a number represented as a linked list.",
      "code": "public List<Integer> addOne(List<Integer> values) { ... }",
      "defaultInput": { "values": [1, 2, 3] },
      "topic": "linkedlist"
    },
    {
      "name": "Add Two Numbers",
      "endpoint": "/api/linkedlist/addTwoNumbers",
      "description": "Add two numbers represented as linked lists.",
      "code": "public List<Integer> addTwoNumbers(List<Integer> l1, List<Integer> l2) { ... }",
      "defaultInput": { "l1": [2, 4, 3], "l2": [5, 6, 4] },
      "topic": "linkedlist"
    }
  ]
} 